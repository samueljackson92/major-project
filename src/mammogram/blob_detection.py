"""
Multi-scale blob detection.

Uses a Laplacian of Gaussian pyramid to detect blobs over multiple scales.

References:

Chen, Zhili, et al. "A multiscale blob representation of mammographic
parenchymal patterns and mammographic risk assessment." Computer Analysis of
Images and Patterns. Springer Berlin Heidelberg, 2013.
"""

import math
import numpy as np
import skimage.filter as filters

from mammogram.utils import normalise_image
from scipy.ndimage.filters import laplace, gaussian_laplace
from sklearn import cluster
from skimage import feature, transform, io, morphology


def blob_detection(image, mask=None, max_layer=10, downscale=np.sqrt(2), sigma=8.0):
    """Performs multi-scale blob detection

    :param image: image to detect blobs in.
    :param mask: mask used on the image. (Optional)
    :param max_layer: maximum depth of image to produce
    :param downscale: factor to downscale the image by
    :param sigma: sigma of the gaussian used as part of the filter
    :yields: ndarry - filtered images at each scale in the pyramid.
    """
    blobs = multiscale_pyramid_detection(image, max_layer, downscale, sigma)
    blobs = remove_edge_blobs(blobs, image.shape)
    blobs = remove_false_positives(blobs, image, mask)
    blobs = merge_blobs(blobs)
    return blobs


def multiscale_pyramid_detection(image, *args):
    """ Detects blobs over multiple scales using an LoG pyramid

    :param image: the image to detect blobs in
    :param args: arguments passed to create the LoG pyramid
    :returns: list of blobs detected over multiple scales in format (y,x,sigma)
    """
    factor = np.sqrt(2)
    maxima = np.empty((0,3))
    for i, img in enumerate(log_pyramid(image, *args)):

        local_maxima = feature.peak_local_max(img, min_distance=0,
                                              threshold_abs=0.001,
                                              footprint=np.ones((5, 5)),
                                              threshold_rel=0.0,
                                              exclude_border=False)

        if len(local_maxima) > 0:
            #Generate array of sigma sizes for this level.
            local_sigma = 8.0*factor**i
            sigmas = np.empty((local_maxima.shape[0], 1))
            sigmas.fill(local_sigma)

            #stack detections together into single list of blobs.
            local_maxima = np.hstack((local_maxima, sigmas))
            maxima = np.vstack((maxima, local_maxima))

    return maxima


def log_pyramid(image, max_layer, downscale, sigma):
    """Generator for a laplacian of gaussian pyramid.

    Due to the fact that mammograms are large, the pyramid is generated by
    downscaling the image for filtering, then upsampling to the original size
    to find peaks.

    :param image: image apply the LoG filter to.
    :param max_layer: maximum depth of image to produce
    :param downscale: factor to downscale the image by
    :param sigma: sigma of the gaussian used as part of the filter
    :yields: ndarry - filtered images at each scale in the pyramid.
    """
    image = normalise_image(image)

    layer = 0
    while layer != max_layer:

        log_filtered = -gaussian_laplace(image, sigma, mode='reflect')

        #upscale to original image size
        if layer > 0:
            log_filtered = transform.rescale(log_filtered, downscale**layer)

        yield log_filtered

        #downscale image, but keep sigma the same.
        image = transform.rescale(image, 1./downscale)
        layer += 1

def remove_edge_blobs(blobs, image_shape):
    """Remove blobs detected around the edge of the image.

    :param blobs: list of blobs detected from the image
    :param image_shape: shape of the image. Provides the bounds to check.
    :returns: list of filtered blobs
    """
    img_height, img_width = image_shape

    def check_within_image(blob):
        y,x,r = blob
        return not (x - r < 0 or x + r > img_width)
               or (y - r < 0 or y + r > img_height)

    return filter(check_within_image, blobs)


def remove_false_positives(blobs, image, mask):
    """Remove false positives from the detected blobs

    :param blobs: list of blobs detected from the image
    :param image: image that the blobs came from
    :param mask: mask used to filter the image tissue
    """
    #Find breast tissue for clustering
    tissue = image[mask==1] if mask is not None else image
    tissue = tissue.reshape(tissue.size, 1)

    clusters = cluster_image(tissue)
    threshold = compute_mean_intensity_threshold(clusters)

    print "Threshold: %f" % threshold

    #Filter blobs by mean intensity using threshold
    return filter_blobs_by_mean_intensity(blobs, image, threshold)


def cluster_image(image, num_clusters=9):
    """Segement the image into clusters using K-Means

    :param image: image to segement
    :param num_clusters: the number of clusters to use
    :returns: list of clusters. Each cluster is an array of intensity values
              belonging to a particular cluster.
    """
    k_means = cluster.KMeans(n_clusters=num_clusters)
    labels = k_means.fit_predict(image)
    return [image[labels==i] for i in range(num_clusters)]


def filter_blobs_by_mean_intensity(blobs, image, threshold):
    """Remove blobs whose mean intensity falls below a threshold

    :param blobs: list of blobs detected from the image
    :param image: image that the blobs came from
    :param threshold: threshold below which blobs are removed
    :returns: list of blobs filtered by their mean intensity
    """
    filtered_blobs = []
    for blob in blobs:
        y,x,r = blob

        kernel = morphology.disk(math.ceil(r))
        hs, he = y - math.ceil(r), y + math.ceil(r)+1
        ws, we = x - math.ceil(r), x + math.ceil(r)+1

        image_section = image[hs:he,ws:we]
        image_section = image_section[kernel==1]
        image_section = image_section.reshape(image_section.size, 1)

        if np.mean(image_section) > threshold:
            filtered_blobs.append(blob)

    return filtered_blobs


def compute_mean_intensity_threshold(clusters, k_largest=3):
    """Compute a threshold based on the mean intensity for tissue in a mammogram

    The threshold is the average intensity from the k most dense clusters less
    the standard deviation of those clusters.

    :param clusters: list of clusters of image segements. The k largest clusters
                     will be used to compute the average intensity threshold.
    :param k_largest: number of clusters to use to compute the threshold.
                      (Default is 3)
    :returns: int - threshold based on the mean intensity
    """
    #Find the high density clusters
    avg_cluster_intensity = np.array([np.average(c) for c in clusters])
    std_cluster_intensity = np.array([np.std(c) for c in clusters])

    indicies = avg_cluster_intensity.argsort()[-k_largest:]
    hdc_avg = avg_cluster_intensity[indicies].reshape(k_largest,1)
    hdc_std = std_cluster_intensity[indicies].reshape(k_largest,1)

    #Compute threshold from the high density cluster intensity
    return np.mean(hdc_avg) - np.std(hdc_std)


def merge_blobs(blobs):
    return blobs
